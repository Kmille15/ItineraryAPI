// <auto-generated />
using ItineraryAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ItineraryAPI.Migrations
{
    [DbContext(typeof(ItineraryAPIContext))]
    partial class ItineraryAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ItineraryAPI.Models.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("MainImage")
                        .IsRequired();

                    b.Property<bool>("PremiumContent");

                    b.Property<string>("PremiumImage");

                    b.Property<string>("TicketLink");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ItineraryAPI.Models.Guides", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("MainImage")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("GuideId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("ItineraryAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ItineraryAPI.Models.UserEvents", b =>
                {
                    b.Property<int>("UserEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<string>("UserId");

                    b.HasKey("UserEventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("ItineraryAPI.Models.UserGuides", b =>
                {
                    b.Property<int>("UserGuideId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GuideId");

                    b.Property<string>("UserId");

                    b.HasKey("UserGuideId");

                    b.HasIndex("GuideId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGuides");
                });

            modelBuilder.Entity("ItineraryAPI.Models.UserEvents", b =>
                {
                    b.HasOne("ItineraryAPI.Models.Events", "Events")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ItineraryAPI.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ItineraryAPI.Models.UserGuides", b =>
                {
                    b.HasOne("ItineraryAPI.Models.Guides", "Guides")
                        .WithMany("UserGuides")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ItineraryAPI.Models.User", "User")
                        .WithMany("UserGuides")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
